<import name="my-popup" src="apex-ui/components/popup/index"></import>
<import name="my-checkbox" src="apex-ui/components/checkbox/index"></import>
<import name="my-select" src="apex-ui/components/select/index"></import>
<import name="my-icon" src="apex-ui/components/icon/index"></import>

<template>
  <div class="chart-wrap">
    <canvas
      id="chartRadar3"
      class="chart"
      style="width: {{width}}px; height: {{height}}px;"
      ontouchstart="ontouchstart"
    ></canvas>

    <div class="btn-row">
      <text class="btn btn-default" @click="openEditConfig">配置参数</text>
    </div>
    <div class="btn-row">
      <text class="btn btn-reset" @click="initChart">初始化图表</text>
    </div>
    <div class="btn-row">
      <text class="btn btn-primary" @click="updateChart">修改参数</text>
    </div>

    <my-popup
      id="popup"
      position="right"
      mask="{{true}}"
      onclose="closeEditConfig"
    >
      <list class="config-wrap">
        <list-item type="list-item" class="config-item">
          <text class="config-item-title">data</text>
          <div class="select" onclick="selectShow('selectDataType')">
            <text>数据类型</text>
            <div>
              <text>{{ config.dataType }}</text>
              <my-icon type="arrow-fwd" size="40"></my-icon>
            </div>
          </div>
          <div class="select" onclick="selectShow('selectSeriesLength')">
            <text>数据数量</text>
            <div>
              <text>{{ config.seriesLength }}</text>
              <my-icon type="arrow-fwd" size="40"></my-icon>
            </div>
          </div>
          <text class="config-item-title">opts</text>
          <my-checkbox
            value="animation"
            position="right"
            shape="square"
            checked="{{config.animation}}"
            onchange="changeConfig('animation')"
          ></my-checkbox>
          <my-checkbox
            value="backgroundColor"
            position="right"
            shape="square"
            checked="{{config.backgroundColor}}"
            onchange="changeConfig('backgroundColor')"
          ></my-checkbox>
          <my-checkbox
            value="legend.show"
            position="right"
            shape="square"
            checked="{{config.legendShow}}"
            onchange="changeConfig('legendShow')"
          ></my-checkbox>
          <my-checkbox
            value="label.show"
            position="right"
            shape="square"
            checked="{{config.labelShow}}"
            onchange="changeConfig('labelShow')"
          ></my-checkbox>
          <text class="config-item-title">radarAxis</text>
          <div class="select" onclick="selectShow('selectAxisShape')">
            <text>shape</text>
            <div>
              <text>{{ config.axisShape }}</text>
              <my-icon type="arrow-fwd" size="40"></my-icon>
            </div>
          </div>
          <my-checkbox
            value="axisName.show"
            position="right"
            shape="square"
            checked="{{config.axisNameShow}}"
            onchange="changeConfig('axisNameShow')"
          ></my-checkbox>
          <my-checkbox
            value="axisLine.show"
            position="right"
            shape="square"
            checked="{{config.axisLineShow}}"
            onchange="changeConfig('axisLineShow')"
          ></my-checkbox>
          <my-checkbox
            value="splitLine.show"
            position="right"
            shape="square"
            checked="{{config.axisSplitLineShow}}"
            onchange="changeConfig('axisSplitLineShow')"
          ></my-checkbox>
          <my-checkbox
            value="splitAreaOdd.show"
            position="right"
            shape="square"
            checked="{{config.splitAreaOddShow}}"
            onchange="changeConfig('splitAreaOddShow')"
          ></my-checkbox>
          <my-checkbox
            value="splitAreaEven.show"
            position="right"
            shape="square"
            checked="{{config.splitAreaEvenShow}}"
            onchange="changeConfig('splitAreaEvenShow')"
          ></my-checkbox>
          <text class="config-item-title">series</text>
          <my-checkbox
            value="line.show"
            position="right"
            shape="square"
            checked="{{config.seriesItemLineShow}}"
            onchange="changeConfig('seriesItemLineShow')"
          ></my-checkbox>
          <my-checkbox
            value="symbol.show"
            position="right"
            shape="square"
            checked="{{config.seriesItemSymbolShow}}"
            onchange="changeConfig('seriesItemSymbolShow')"
          ></my-checkbox>
          <my-checkbox
            value="area.show"
            position="right"
            shape="square"
            checked="{{config.seriesItemAreaShow}}"
            onchange="changeConfig('seriesItemAreaShow')"
          ></my-checkbox>
        </list-item>
      </list>

      <div class="config-btn btn-row">
        <text class="btn btn-reset" @click="resetConfig">重置参数</text>
        <text class="btn btn-default" @click="closeEditConfig">关闭</text>
      </div>
    </my-popup>

    <my-select
      id="selectDataType"
      oncomfirm="selectClose('dataType')"
    ></my-select>
    <my-select
      id="selectSeriesLength"
      oncomfirm="selectClose('seriesLength')"
    ></my-select>
    <my-select
      id="selectAxisShape"
      oncomfirm="selectClose('axisShape')"
    ></my-select>
  </div>
</template>

<script>
import Charts from "apex-ui/components/charts/qacharts.js";
// import Charts from 'apex-ui/components/charts/qacharts-min.js'

let $chart = null;

export default {
  props: {
    width: {
      default: 600
    },
    height: {
      default: 400
    }
  },
  data() {
    return {
      config: {
        dataType: "正数",
        seriesLength: "1",

        animation: true,
        backgroundColor: true,
        legendShow: true,
        labelShow: true,

        axisShape: "polygon",
        axisNameShow: true,
        axisLineShow: true,
        axisSplitLineShow: true,
        splitAreaOddShow: true,
        splitAreaEvenShow: true,

        seriesItemLineShow: true,
        seriesItemSymbolShow: true,
        seriesItemAreaShow: false
      }
    };
  },
  resetConfig() {
    this.config = {
      dataType: "正数",
      seriesLength: "1",

      animation: true,
      backgroundColor: true,
      legendShow: true,
      labelShow: true,

      axisShape: "polygon",
      axisNameShow: true,
      axisLineShow: true,
      axisSplitLineShow: true,
      splitAreaOddShow: true,
      splitAreaEvenShow: true,

      seriesItemLineShow: true,
      seriesItemSymbolShow: true,
      seriesItemAreaShow: false
    };
  },
  changeConfig(key, { detail }) {
    this.config[key] = detail.current;
  },
  openEditConfig() {
    this.$child("popup").show();
  },
  closeEditConfig() {
    this.$child("popup").hide();
  },
  selectShow(id) {
    let options;
    switch (id) {
      case "selectDataType":
        options = ["正数", "负数", "正负数"];
        break;
      case "selectSeriesLength":
        options = ["1", "2", "3", "4", "5"];
        break;
      case "selectAxisShape":
        options = ["polygon", "circle"];
        break;
    }

    this.$child(id).showSelect({
      options
    });
  },
  selectClose(key, event) {
    this.config[key] = event.detail.data || "请选择";
    if (key == "xAxisType") {
      this.config.yAxisType =
        this.config.xAxisType == "category" ? "value" : "category";
      this.config.boundaryGap = true;
    } else if (key == "yAxisType") {
      this.config.xAxisType =
        this.config.yAxisType == "category" ? "value" : "category";
      this.config.boundaryGap = true;
    }
  },
  getMockData() {
    let categoriesLen = 7;
    let digits = 0;
    let seriesLength = Number(this.config.seriesLength);

    let mockCategories = Array.from(new Array(7).keys(), item => item + 1);
    let mockSeries = [];

    for (let i = 0; i < seriesLength; i++) {
      switch (this.config.dataType) {
        case "正数":
          mockSeries.push({
            name: `正数${i + 1}`,
            type: "radar",
            data: this.$app.$def.getMockData(categoriesLen, 50, 100, digits)
          });
          break;
        case "负数":
          mockSeries.push({
            name: `负数${i + 1}`,
            type: "radar",
            data: this.$app.$def.getMockData(categoriesLen, -100, -50, digits)
          });
          break;
        case "正负数":
          mockSeries.push({
            name: `正负数${i + 1}`,
            type: "radar",
            data: this.$app.$def.getMockData(categoriesLen, -50, 50, digits)
          });
          break;
      }
    }

    return {
      mockCategories,
      mockSeries
    };
  },
  updateChart(type) {
    if (!$chart) return;

    let { mockCategories, mockSeries } = this.getMockData();

    mockSeries = mockSeries.map(seriesItem => {
      seriesItem.line = {
        show: this.config.seriesItemLineShow
      };
      seriesItem.symbol = {
        show: this.config.seriesItemSymbolShow
      };
      seriesItem.area = {
        show: this.config.seriesItemAreaShow
      };

      return seriesItem;
    });

    let opts = {
      animation: this.config.animation,
      backgroundColor: this.config.backgroundColor ? "#eeeeee" : "#ffffff",
      legend: {
        show: this.config.legendShow
      },
      radarAxis: {
        shape: this.config.axisShape,
        axisName: {
          show: this.config.axisNameShow
        },
        axisLine: {
          show: this.config.axisLineShow
        },
        splitLine: {
          show: this.config.axisSplitLineShow
        },
        splitArea: {
          odd: {
            show: this.config.splitAreaOddShow
          },
          even: {
            show: this.config.splitAreaEvenShow
          }
        }
      },
      categories: mockCategories,
      series: mockSeries
    };

    $chart.updateData(opts);
  },
  initChart() {
    this.resetConfig();

    let { mockCategories, mockSeries } = this.getMockData();

    return new Promise((resolve, reject) => {
      $chart = new Charts({
        element: this.$element("chartRadar3"),
        width: this.width,
        height: this.height,
        backgroundColor: this.config.backgroundColor ? "#eeeeee" : "#ffffff",
        animation: this.config.animation,
        animationDuration: 1000,
        animationTiming: "easeInOut", // easeIn, easeOut, easeInOut, linear
        padding: [20, 20, 20, 20],
        legend: {
          show: this.config.legendShow,
          type: "default",
          marginTop: 8,
          itemGap: 15,
          shapeWidth: 15,
          shapeHeight: 15,
          textStyle: {
            fontSize: 15,
            color: "#333333",
            padding: 5
          }
        },
        label: {
          show: this.config.labelShow,
          fontSize: 10,
          color: "auto",
          margin: 2
        },
        radarAxis: {
          shape: this.config.shape, // polygon. circle
          center: ["50%", "50%"],
          radius: "80%",
          max: "auto",
          splitNumber: 4,
          axisName: {
            show: this.config.axisNameShow,
            textStyle: {
              fontSize: 15,
              color: "#666666",
              margin: 10
            }
          },
          axisLine: {
            show: this.config.axisLineShow,
            lineStyle: {
              lineWidth: 2,
              color: "#cccccc",
              opacity: 1
            }
          },
          splitLine: {
            show: this.config.axisSplitLineShow,
            lineStyle: {
              lineWidth: 1,
              color: "#cccccc",
              opacity: 1
            }
          },
          splitArea: {
            odd: {
              show: this.config.splitAreaOddShow,
              color: "#f5f5f5", // 奇数区域颜色与背景色相同
              opacity: 1
            },
            even: {
              show: this.config.splitAreaEvenShow,
              color: "#e6e6e6", // 奇数区域颜色与背景色相同
              opacity: 1
            }
          }
        },
        categories: mockCategories,
        series: [
          {
            type: "radar",
            name: mockSeries[0].name,
            data: mockSeries[0].data,
            line: {
              show: this.config.seriesItemLineShow,
              lineWidth: 2,
              color: "auto",
              opacity: 1
            },
            symbol: {
              show: this.config.seriesItemSymbolShow,
              type: "circle", // circle
              size: 7,
              color: "auto"
            },
            area: {
              show: this.config.seriesItemAreaShow,
              color: "auto",
              opacity: 0.5
            },
            label: {
              show: true,
              fontSize: 10,
              color: "auto",
              margin: 5
            }
          }
        ],
        onRenderComplete: () => {
          console.log("chartRadar3 renderComplete");
          resolve();
        }
      });
    });
  },
  ontouchstart(e) {
    console.log(`chartRadar3 touchstart`);
  }
};
</script>

<style lang="less">
@import "../../../../common/styles/common.less";
</style>
